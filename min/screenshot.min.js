(()=>{return(e,t)=>{const{getFriendlyTitle:s}=t.import("title");const i=document.createElement("canvas");class n{constructor(e,t){this.url="";this.timeStamp=(new Date).getTime();this.video=e;this.time=t;this.createUrl()}async createUrl(){i.width=this.video.videoWidth;i.height=this.video.videoHeight;const e=i.getContext("2d");if(e===null){throw new Error("视频截图失败: canvas 未创建或创建失败.")}e.drawImage(this.video,0,0);i.toBlob(e=>{if(e===null){throw new Error("视频截图失败: 创建 blob 失败.")}this.blob=e;this.url=URL.createObjectURL(e)},"image/png")}get filename(){return`${s()} @${this.time.toString()}:${this.timeStamp.toString()}.png`}get id(){return this.time.toString()+this.timeStamp.toString()}revoke(){URL.revokeObjectURL(this.url)}}const o=e=>{const t=e.currentTime;return new n(e,t)};t.applyStyle("videoScreenshotStyle");document.body.insertAdjacentHTML("beforeend",`\n    <div class="video-screenshot-container">\n        <transition-group class="video-screenshot-list" name="video-screenshot-list" tag="div">\n            <video-screenshot v-for="screenshot of screenshots" v-bind:filename="screenshot.filename" v-bind:object-url="screenshot.url" v-on:discard="discard(screenshot)" v-bind:key="screenshot.id"></video-screenshot>\n        </transition-group>\n        <div v-show="showBatch" class="video-screenshot-batch">\n            <a class="batch-link" style="display:none" v-bind:download="batchFilename"></a>\n            <button v-on:click="saveAll">\n                <i class="mdi mdi-content-save"></i>全部保存\n            </button>\n            <button v-on:click="discardAll">\n                <i class="mdi mdi-delete-forever"></i>全部丢弃\n            </button>\n        </div>\n    </div>\n`);Vue.component("video-screenshot",{props:{objectUrl:String,filename:String},template:`\n        <div class="video-screenshot-thumbnail">\n            <img v-if="objectUrl" v-bind:src="objectUrl">\n            <div class="mask" v-if="objectUrl">\n                <a class="link" style="display:none" v-bind:href="objectUrl" v-bind:download="filename"></a>\n                <button v-on:click="save" class="save" title="保存"><i class="mdi mdi-content-save-outline"></i></button>\n                <button v-on:click="discard" title="丢弃" class="discard"><i class="mdi mdi-delete-forever-outline"></i></button>\n            </div>\n            <div class="loading" v-else>\n            </div>\n        </div>`,methods:{discard(){this.$emit("discard")},save(){this.$el.querySelector(".link").click();this.discard()}}});const r=new Vue({el:".video-screenshot-container",data:{screenshots:[],batchFilename:s()+".zip"},methods:{discard(e){this.screenshots.splice(this.screenshots.indexOf(e),1);e.revoke()},async saveAll(){const e=new JSZip;this.screenshots.forEach(t=>{e.file(t.filename,t.blob)});const t=await e.generateAsync({type:"blob"});const s=this.$el.querySelector(".batch-link");s.href=URL.createObjectURL(t);s.click();URL.revokeObjectURL(s.href);s.href=""},discardAll(){this.screenshots.forEach(e=>e.revoke());this.screenshots=[]}},computed:{showBatch(){return this.screenshots.length>=2}}});Observer.videoChange(async()=>{const e=await SpinQuery.select("#bofqi video");const t=await SpinQuery.select(".bilibili-player-video-time");if(e===null||t===null||document.querySelector(".video-take-screenshot")){return}t.insertAdjacentHTML("afterend",`\n    <div class="video-take-screenshot" title="截图">\n        <span><i class="mdi mdi-camera"></i></span>\n    </div>`);const s=document.querySelector(".video-take-screenshot");if(s===null){return}s.addEventListener("click",()=>{const t=o(e);r.screenshots.unshift(t)})});return{export:{takeScreenshot:o,screenShotsList:r}}}})();