(()=>{return(o,t)=>{function r(){const t=o.aria2RpcOption;const r=t.host.match(/^http[s]?:\/\//)?t.host:"http://"+t.host;const e="aria2.addUri";return{option:t,host:r,methodName:e}}async function e(o){try{let t=await o();if(typeof t==="string"){t=JSON.parse(t)}if(t.error!==undefined){if(t.error.code===1){logError(`请求遭到拒绝, 请检查您的密钥相关设置.`)}else{logError(`请求发生错误, code = ${t.error.code}, message = ${t.error.message}`)}return}Toast.success(`成功发送了请求, GID = ${t.result}`,"aria2 RPC",5e3)}catch(o){logError(`无法连接到RPC主机, error = ${o}`);return}}async function n(o){const{option:t,host:n,methodName:s}=r();await e(async()=>{const r=window.btoa(unescape(encodeURIComponent(JSON.stringify(o.params))));const e=`${n}:${t.port}/jsonrpc?method=${s}&id=${o.id}&params=${r}`;console.log(`RPC request:`,e);return await Ajax.getJson(e)})}async function s(o){const{option:t,host:n,methodName:s}=r();await e(async()=>{const r=`${n}:${t.port}/jsonrpc`;console.log(`RPC request:`,r);return await Ajax.postJson(r,{method:s,id:o.id,params:o.params})})}async function a(t){const r=o.aria2RpcOption;for(const o of t){if(r.method==="get"){await n(o)}else{await s(o)}}}return{export:{sendRpc:a}}}})();